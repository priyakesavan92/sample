package sample2;

interface fun
{
	void display();
	default void show()
	{
		System.out.println("Hello");
	}
	static void show22()
	{
		System.out.println("hai");
	}
}
public class Example2 implements fun{

	public void display()
	{
		System.out.println("This is sample program");
	}
	public void show()
	{
		System.out.println("This is overriden");
	}
	//@Override 
	public static void show22()
	{
		System.out.println("This is overriden interface of static");
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Example2 ex2=new Example2();
		ex2.display();
		ex2.show();
		show22();

}
}

In interface we can have abstract, static and default methods after java 8.

default and static allows us to give the implementation of the method in interface.

if we specify the method to be default then it can be overriden in the class that implements 
interface

but if we specify it to be static then it cant be overriden in the class.



!!!! Method reference  !!! after java 8.

Math.max(x,y) 	->  find the max

Math::max

system.out.prinltn

System.out::println


str.length()	--> String :: length

1. Reference to a static method
2. Reference to an instance method
3. Reference to a constructor.

interface Example
{
	void sample();
}

class Main
{
	public static void display()
	{
		System.out.println("Hello this is sample code");
	}
	public static void main(String[] args)
	{		
		Example e=Main::display;
		e.sample();
	}
}


2. Reference to an intance method




interface Example
{
	void sample();
}

class Main
{
	public  void display()
	{
		System.out.println("Hello this is sample code");
	}
	public static void main(String[] args)

	{	
		Main m=new Main();	
		Example e=m::display;
		e.sample();
	}
}


3. Refering to a constructor
Method reference is used to refer the method of functional interface. We can replace
lambda with method reference. 

@FunctionalInterface

interface Sample
{
	Example1 s(String m);
}

class Example1
{
	Example1(String m)
	{
		System.out.println(m);
	}
}
class Main
{
	public static void main(String[] args)
	{
		Sample sam=Example1::new;
		sam.s("This is sample code");
	}
}

Another example of Method reference without functional interface::
import java.util.Arrays;

class Main
{
    public static void main(String[] args)
    {
        String[] sr={"chitrak","syed","Abdul","Saravanan","Pravin","Divya"};
        
        Arrays.sort(sr,String::compareToIgnoreCase);
        for(String s:sr)
        {
            System.out.println(s);
        }
    }
}



1. Write a java code that illustrates lambda expression with no parameter

2. Java code that illustrate lambda expression with single parameter

3. Java code that illustrate lamda expression with multiple parameters

4. iterate the collections (List ) using for each [lamda expression]

5.functional interface using anonymous inner class 

6. functional interface using lambda expression




Solution::


1. 

interface Fun_interface 
{
	public String sample();
}

class Main
{
	public static void main(String[] args)
	{
		Fun_interface fun_in=()->{
			return "This is sample code";
		};
	System.out.println(fun_in.sample());
	}
}



Example 2::


interface Fun_interface 
{
	public String sample(String s);
}

class Main
{
	public static void main(String[] args)
	{
		Fun_interface fun_in=(st)->{
			return "This is sample code "+st;
		};
	System.out.println(fun_in.sample("Revature"));
	}
}

Example 3::
interface Fun_interface 
{
	public String sample(String s,String q);
}

class Main
{
	public static void main(String[] args)
	{
		Fun_interface fun_in=(st1,st2)->{
			return st1+" " + st2;
		};
	System.out.println(fun_in.sample("Revature","Associates"));
	}
}



Example 4::

import java.util.*;

class Main
{
	public static void main(String[] args)
	{
		List<Integer> li=new ArrayList<Integer>();
		li.add(100);
		li.add(3);	
		li.add(56);
		li.forEach( (ele) -> System.out.println(ele));
	}
}


Example 5::

import java.util.*;
import java.lang.*;
import java.io.*;


interface A{
    public void  display();
}
class Main{
    public static void main(String[] args){
        A a = new A(){
            public void display(){
                System.out.println("hello");
            }
        };
        a.display();
    }
}


!!!! shadowing fields !!!


1. Write a program that illustrate shadowing field?

public class Main
{
    int i=10;
    void num()
    {
        int i=20;
        System.out.println(i);
        System.out.println(this.i);
    }
	public static void main(String[] args) {
		Main m = new Main();
		m.num();
	}
}
 

Continuation of collections::


Set interface


--> unordered collection of objects
--> unique 
--> extends collection 
--> java.util.*


--> The two interfaces which is going to extend the set interface 

		--> Sorted set
		--> Navigable set 


		-->  Treeset implement Navigable

	Hash set and linkedhashset

			Hashset				linkedhashset

	1. doesnt follow insertion order		it will follows insertion order
	2. hashtable to store the elements		it uses hashtable and doubly linkedlist 
	3. less memory					more memory compares to hashset.
	4. HashSet o=new HashSet();			LinkedHashSet o=new LinkedHashSet();
	

import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        Set<String> gro=new LinkedHashSet<String>();
        gro.add("Abinaya");
        gro.add("Akash");
        gro.add("Aman");
        
        System.out.println(gro);
    }
}

o/p::::::  [Abinaya, Akash, Aman]



import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        Set<String> gro=new HashSet<String>();
        gro.add("Abinaya");
        gro.add("Akash");
        gro.add("Aman");
        
        System.out.println(gro);
    }
}

o/p::: [Aman, Abinaya, Akash]

!!!1  operations on the set interface::  !!!

addall()---> performs the union

retainall() --> perform the intersection


removeAll() --> difference

import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        Integer[] A={12,89,45,56,78};
        Integer[] B={33,12,45,89,56};
        Set<Integer> s1=new HashSet<Integer>();
        s1.addAll(Arrays.asList(A));
          Set<Integer> s2=new HashSet<Integer>();
        s2.addAll(Arrays.asList(B));
          
          Set<Integer> uni=new HashSet<Integer>(s1);
        uni.addAll(s2);
        
        System.out.println(uni);
        
         Set<Integer> inter=new HashSet<Integer>(s1);
        inter.retainAll(s2);
        
        System.out.println(inter);
        
         Set<Integer> diff=new HashSet<Integer>(s1);
        diff.removeAll(s2);
        
        System.out.println(diff);
    }
}


Method::
1. add()-->
2.addall()
3. clear() -> empty the set.
4. contains()
5. containsAll()->
6. hashCode() -->
7.isEmpty()
8.iterator()
9. remove()--> 
10. removeAll()-->
11.retainAll()
12.size()--> 

import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        LinkedList li=new LinkedList();
        li.add(10);
        li.add(12);
        li.add(14);
        System.out.println(li.indexOf(12));
    }
}

1. program to convert a hashset to an array ..

import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        HashSet li=new HashSet();
        li.add(10);
        li.add(12);
        li.add(14);
        
        Integer[] new_ar=new Integer[li.size()];
        li.toArray(new_ar);
        
        for(Integer i: new_ar)
            System.out.println(i);
       
    }
}

2. program to iterate through all elements in a hash set

import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        HashSet li=new HashSet();
        li.add(10);
        li.add(12);
        li.add(14);
        
        Iterator <Integer> it=li.iterator();
        
        while(it.hasNext())
        {
            System.out.println(it.next());
        }
    }
}

!!! sortedset interface !!!




import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        HashSet li=new HashSet();
        li.add(10);
        li.add(12);
        li.add(14);
        
        Iterator <Integer> it=li.iterator();
        
        while(it.hasNext())
        {
            System.out.println(it.next());
        }
    }
}


Methods::

comparator()--> 
first()
last()
headSet(ele)--> return all the ele of the set before the specified ele
tailSet(ele)--> return all the ele after the specified ele
subset(e1,e2)--> ele between ele1 and ele2 including ele1




NavigableSet interface::::::

descendingSet() --> reverse the order

descendingIterator() --> 

ceiling()--> 

floor()-->
pollfirst()
polllast()-->


import java.util.*;
class Main
{
  public static void main (String[]args)
  {
    NavigableSet <Integer> s = new TreeSet ();

    s.add (11);
    s.add (15);
    s.add (1);
    s.add (5);

    System.out.println (s.first());
    System.out.println(s.last());
System.out.println(s.ceiling(12));
System.out.println(s.pollFirst());
System.out.println(s);
    
  }
}


1. Write a Java program to find the numbers less than 10 in the tree set.
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		TreeSet<Integer> ts=new TreeSet<Integer>();
		ts.add(14);
		ts.add(2);
		ts.add(5);
		ts.add(11);
		TreeSet<Integer> trhead= new TreeSet<Integer>();
		trhead.addAll(ts.headSet(10));
		
		System.out.println(trhead);
	}
}

2. Program to add all the elements of a specified tree set to another tree set.
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		TreeSet<Integer> ts=new TreeSet<Integer>();
		ts.add(14);
		ts.add(2);
		ts.add(5);
		ts.add(11);
		TreeSet<Integer> tr= new TreeSet<Integer>();
		tr.add(1100);
		tr.add(1200);
		tr.add(1400);
		trhead.addAll(tr);
		
		System.out.println(trhead);
	}
}

3. program to remove an element from the treeset..
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		TreeSet<Integer> ts=new TreeSet<Integer>();
		ts.add(14);
		ts.add(2);
		ts.add(5);
		ts.add(11);
	
		ts.remove(14);
		
		System.out.println(ts);
	}
}
***********************************************************************************
!!! removeAll()


import java.util.*;
public class Main
{
	public static void main(String[] args) {
		TreeSet<Integer> ts=new TreeSet<Integer>();
		ts.add(14);
		ts.add(2);
		ts.add(5);
		ts.add(11);
		TreeSet<Integer> tr= new TreeSet<Integer>();
		tr.add(14);
		tr.add(11);
		ts.removeAll(tr);
		
		System.out.println(ts);
	}
}


import java.util.*;
class Example implements Comparator<Integer>{
    @Override
    public int compare(Integer a, Integer b)
    {
        Integer n1=a;
        Integer  n2=b;
        return n2-n1;
    }
}
public class Main
{
	public static void main(String[] args) {
		TreeSet<Integer> ts=new TreeSet<Integer>();
		ts.add(14);
		ts.add(2);
		ts.add(5);
		ts.add(11);
	
		System.out.println(ts);
		
		TreeSet<Integer> ts1=new TreeSet<Integer>(new Example());
		ts1.add(14);
		ts1.add(2);
		ts1.add(5);
		ts1.add(11);
		System.out.println(ts1);
	}
}




























